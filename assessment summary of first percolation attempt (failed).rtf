{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red98\green98\blue98;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c45882\c45882\c45882;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww16640\viewh10980\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ASSESSMENT SUMMARY\
\
Compilation:  PASSED\
API:          PASSED\
\
Findbugs:     FAILED (2 warnings)\
PMD:          PASSED\
Checkstyle:   FAILED (0 errors, 8 warnings)\
\
Correctness:  17/30 tests passed\
Memory:       4/8 tests passed\
Timing:       16/20 tests passed\
\
Aggregate score: 65.00%\
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]\
\
ASSESSMENT DETAILS\
\
The following files were submitted:\
----------------------------------\
6.0K Aug  5 22:02 Percolation.java\
2.7K Aug  5 22:02 PercolationStats.java\
\
\
********************************************************************************\
*  COMPILING                                                                    \
********************************************************************************\
\
\
% javac Percolation.java\
*-----------------------------------------------------------\
\
% javac PercolationStats.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
Checking the APIs of your programs.\
*-----------------------------------------------------------\
Percolation:\
\
PercolationStats:\
\
================================================================\
\
\
********************************************************************************\
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       \
********************************************************************************\
\
\
% findbugs *.class\
*-----------------------------------------------------------\
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'adjacentIds()' is never called.  At Percolation.java:[lines 82-86]\
M P URF_UNREAD_FIELD UrF: The instance (or static) variable 'thresholds' is never read. Consider removing it from the class.  At PercolationStats.java:[line 21]\
Warnings generated: 2\
\
\
================================================================\
\
\
% pmd .\
*-----------------------------------------------------------\
Percolation.java:9: The private instance (or static) variable 'grid' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]\
Percolation.java:10: The private instance (or static) variable 'unionFind' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]\
Percolation.java:81: Avoid unused private methods, such as 'adjacentIds(int)'. [UnusedPrivateMethod]\
Percolation.java:182: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]\
PercolationStats.java:10: Avoid unused private instance (or static) variables, such as 'thresholds'. [UnusedPrivateField]\
PercolationStats.java:10: Can you replace the instance (or static) variable 'thresholds' with a local variable? [SingularField]\
PercolationStats.java:10: The private instance (or static) variable 'thresholds' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]\
PercolationStats.java:12: The private instance (or static) variable 'nSize' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]\
PercolationStats.java:13: The private instance (or static) variable 'siteCount' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]\
PercolationStats.java:14: The private instance (or static) variable 'numTrials' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]\
PMD ends with 10 warnings.\
\
\
================================================================\
\
\
% checkstyle *.java\
*-----------------------------------------------------------\
[WARN] PercolationStats.java:6: Do not use static imports. [AvoidStaticImport]\
[WARN] PercolationStats.java:30:38: The parameter variable 'T' must start with a lowercase letter and use camelCase. [ParameterName]\
[WARN] PercolationStats.java:82:13: The local variable 'T' must start with a lowercase letter and use camelCase. [LocalVariableName]\
Checkstyle ends with 0 errors and 3 warnings.\
\
% custom checkstyle checks for Percolation.java\
*-----------------------------------------------------------\
[INFO] Percolation.java:58: Using a loop in this method might be a performance bug. [Performance]\
[WARN] Percolation.java:9:13: Can you use the type 'boolean[][]' instead of 'int[][]'? [Design]\
[WARN] Percolation.java:98:25: The numeric literal '4' appears to be unnecessary. [NumericLiteral]\
[WARN] Percolation.java:100:45: The numeric literal '4' appears to be unnecessary. [NumericLiteral]\
Checkstyle ends with 0 errors and 3 warnings.\
\
% custom checkstyle checks for PercolationStats.java\
*-----------------------------------------------------------\
[WARN] PercolationStats.java:5: The total number of calls to the static method in the set \{ StdRandom.uniform(), StdRandom.permutation(), StdRandom.random(), StdRandom.shuffle() \} is 0 (min required = 1). [MethodCallCount]\
[WARN] PercolationStats.java:5:1: The constant '1.96' appears more than once. Define a constant variable (such as 'CONFIDENCE_95') to hold the constant '1.96'. [NumericLiteralCount]\
Checkstyle ends with 0 errors and 2 warnings.\
\
\
================================================================\
\
\
********************************************************************************\
*  TESTING CORRECTNESS\
********************************************************************************\
\
Testing correctness of Percolation\
*-----------------------------------------------------------\
Running 15 total tests.\
\
Tests 1 through 8 create a Percolation object using your code, then repeatedly\
open sites by calling open(). After each call to open(), it checks the return\
values of isOpen(), percolates(), numberOfOpenSites(), and isFull() in that order.\
Except as noted, a site is opened at most once.\
\
Tests 13 through 15 test backwash.\
\
Test 1: open predetermined list of sites using file inputs\
  * filename = input6.txt\
    - percolates() returns wrong value after 18 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
  * filename = input8.txt\
    - percolates() returns wrong value after 34 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
  * filename = input8-no.txt\
  * filename = input10-no.txt\
  * filename = greeting57.txt\
  * filename = heart25.txt\
==> FAILED\
\
Test 2: open random sites until just before system percolates\
  * n = 3\
  * n = 5\
  * n = 10\
  * n = 10\
  * n = 20\
  * n = 20\
  * n = 50\
  * n = 50\
==> passed\
\
Test 3: open predetermined sites for n = 1 and n = 2 (corner case test)\
  * filename = input1.txt\
    - percolates() returns wrong value after 1 site opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
  * filename = input1-no.txt\
  * filename = input2.txt\
  * filename = input2-no.txt\
==> FAILED\
\
Test 4: check predetermined sites with long percolating path\
  * filename = snake13.txt\
    - percolates() returns wrong value after 85 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
  * filename = snake101.txt\
    - percolates() returns wrong value after 5101 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
==> FAILED\
\
Test 5: open every site\
  * filename = input5.txt\
    - percolates() returns wrong value after 21 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
==> FAILED\
\
Test 6: open random sites until just before system percolates,\
        allowing open() to be called on a site more than once\
  * n = 3\
  * n = 5\
  * n = 10\
  * n = 10\
  * n = 20\
  * n = 20\
  * n = 50\
  * n = 50\
==> passed\
\
Test 7: call methods with invalid arguments\
  * n = 10, (row, col) = (-1, 5)\
    - open() throws the wrong exception\
    - open() throws a java.lang.ArrayIndexOutOfBoundsException\
    - open() should throw a java.lang.IllegalArgumentException\
\
    - isOpen() throws the wrong exception\
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException\
    - isOpen() should throw a java.lang.IllegalArgumentException\
\
    - isFull() throws the wrong exception\
    - isFull() throws a java.lang.ArrayIndexOutOfBoundsException\
    - isFull() should throw a java.lang.IllegalArgumentException\
\
  * n = 10, (row, col) = (11, 5)\
    - open() throws the wrong exception\
    - open() throws a java.lang.ArrayIndexOutOfBoundsException\
    - open() should throw a java.lang.IllegalArgumentException\
\
    - isOpen() throws the wrong exception\
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException\
    - isOpen() should throw a java.lang.IllegalArgumentException\
\
    - isFull() throws the wrong exception\
    - isFull() throws a java.lang.ArrayIndexOutOfBoundsException\
    - isFull() should throw a java.lang.IllegalArgumentException\
\
  * n = 10, (row, col) = (0, 5)\
    - open() throws the wrong exception\
    - open() throws a java.lang.ArrayIndexOutOfBoundsException\
    - open() should throw a java.lang.IllegalArgumentException\
\
    - isOpen() throws the wrong exception\
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException\
    - isOpen() should throw a java.lang.IllegalArgumentException\
\
    - isFull() throws the wrong exception\
    - isFull() throws a java.lang.ArrayIndexOutOfBoundsException\
    - isFull() should throw a java.lang.IllegalArgumentException\
\
  * n = 10, (row, col) = (5, -1)\
    - open() throws the wrong exception\
    - open() throws a java.lang.ArrayIndexOutOfBoundsException\
    - open() should throw a java.lang.IllegalArgumentException\
\
    - isOpen() throws the wrong exception\
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException\
    - isOpen() should throw a java.lang.IllegalArgumentException\
\
    - isFull() throws the wrong exception\
    - isFull() throws a java.lang.ArrayIndexOutOfBoundsException\
    - isFull() should throw a java.lang.IllegalArgumentException\
\
  * n = 10, (row, col) = (5, 11)\
    - open() throws the wrong exception\
    - open() throws a java.lang.ArrayIndexOutOfBoundsException\
    - open() should throw a java.lang.IllegalArgumentException\
\
    - isOpen() throws the wrong exception\
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException\
    - isOpen() should throw a java.lang.IllegalArgumentException\
\
    - isFull() throws the wrong exception\
    - isFull() throws a java.lang.ArrayIndexOutOfBoundsException\
    - isFull() should throw a java.lang.IllegalArgumentException\
\
  * n = 10, (row, col) = (5, 0)\
    - open() throws the wrong exception\
    - open() throws a java.lang.ArrayIndexOutOfBoundsException\
    - open() should throw a java.lang.IllegalArgumentException\
\
    - isOpen() throws the wrong exception\
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException\
    - isOpen() should throw a java.lang.IllegalArgumentException\
\
    - isFull() throws the wrong exception\
    - isFull() throws a java.lang.ArrayIndexOutOfBoundsException\
    - isFull() should throw a java.lang.IllegalArgumentException\
\
  * n = 10, (row, col) = (-2147483648, -2147483648)\
    - open() throws the wrong exception\
    - open() throws a java.lang.ArrayIndexOutOfBoundsException\
    - open() should throw a java.lang.IllegalArgumentException\
\
    - isOpen() throws the wrong exception\
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException\
    - isOpen() should throw a java.lang.IllegalArgumentException\
\
    - isFull() throws the wrong exception\
    - isFull() throws a java.lang.ArrayIndexOutOfBoundsException\
    - isFull() should throw a java.lang.IllegalArgumentException\
\
  * n = 10, (row, col) = (2147483647, 2147483647)\
    - open() throws the wrong exception\
    - open() throws a java.lang.ArrayIndexOutOfBoundsException\
    - open() should throw a java.lang.IllegalArgumentException\
\
    - isOpen() throws the wrong exception\
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException\
    - isOpen() should throw a java.lang.IllegalArgumentException\
\
    - isFull() throws the wrong exception\
    - isFull() throws a java.lang.ArrayIndexOutOfBoundsException\
    - isFull() should throw a java.lang.IllegalArgumentException\
\
==> FAILED\
\
Test 8: call constructor with invalid argument\
  * n = -10\
    - the constructor throws the wrong exception\
    - the constructor throws a java.lang.NegativeArraySizeException\
    - the constructor should throw a java.lang.IllegalArgumentException\
\
  * n = -1\
    - the constructor throws the wrong exception\
    - the constructor throws a java.lang.NegativeArraySizeException\
    - the constructor should throw a java.lang.IllegalArgumentException\
\
  * n = 0\
    - the constructor fails to throw an exception\
    - the constructor should throw a java.lang.IllegalArgumentException\
\
==> FAILED\
\
Test 9: create multiple Percolation objects at the same time\
        (to make sure you didn't store data in static variables)\
==> passed\
\
Test 10: open predetermined list of sites using file inputs,\
         but permute the order in which methods are called\
  * filename = input8.txt;  order =     isFull(),     isOpen(), percolates()\
    - percolates() returns wrong value after 34 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
  * filename = input8.txt;  order =     isFull(), percolates(),     isOpen()\
    - percolates() returns wrong value after 34 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
  * filename = input8.txt;  order =     isOpen(),     isFull(), percolates()\
    - percolates() returns wrong value after 34 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
  * filename = input8.txt;  order =     isOpen(), percolates(),     isFull()\
    - percolates() returns wrong value after 34 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
  * filename = input8.txt;  order = percolates(),     isOpen(),     isFull()\
    - percolates() returns wrong value after 34 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
  * filename = input8.txt;  order = percolates(),     isFull(),     isOpen()\
    - percolates() returns wrong value after 34 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
==> FAILED\
\
Test 11: call all methods in random order until just before system percolates\
  * n = 3\
  * n = 5\
  * n = 7\
  * n = 10\
  * n = 20\
  * n = 50\
==> passed\
\
Test 12: call all methods in random order until almost all sites are open,\
         but with inputs not prone to backwash\
  * n = 3\
    - percolates() returns wrong value after 5 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
    - failed on trial 7 of 40\
\
  * n = 5\
    - percolates() returns wrong value after 19 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
    - failed on trial 2 of 20\
\
  * n = 7\
    - percolates() returns wrong value after 25 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
    - failed on trial 3 of 10\
\
  * n = 10\
    - percolates() returns wrong value after 55 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
    - failed on trial 4 of 5\
\
  * n = 20\
  * n = 50\
==> FAILED\
\
Test 13: check for backwash with predetermined sites\
  * filename = input20.txt\
    - percolates() returns wrong value after 204 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
  * filename = input10.txt\
    - percolates() returns wrong value after 56 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
  * filename = input50.txt\
    - percolates() returns wrong value after 1412 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
  * filename = jerry47.txt\
    - percolates() returns wrong value after 1076 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
  * filename = sedgewick60.txt\
    - percolates() returns wrong value after 1577 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
  * filename = wayne98.txt\
    - percolates() returns wrong value after 3851 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
==> FAILED\
\
Test 14: check for backwash with predetermined sites that have\
         multiple percolating paths\
  * filename = input3.txt\
    - percolates() returns wrong value after 5 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
  * filename = input4.txt\
    - percolates() returns wrong value after 4 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
  * filename = input7.txt\
==> FAILED\
\
Test 15: call all methods in random order until all sites are open,\
         allowing isOpen() to be called on a site more than once\
         (these inputs are prone to backwash)\
  * n = 3\
    - percolates() returns wrong value after 5 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
    - failed on trial 1 of 40\
\
  * n = 5\
    - percolates() returns wrong value after 14 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
    - failed on trial 1 of 20\
\
  * n = 7\
    - percolates() returns wrong value after 31 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
    - failed on trial 1 of 10\
\
  * n = 10\
    - percolates() returns wrong value after 60 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
    - failed on trial 1 of 5\
\
  * n = 20\
    - percolates() returns wrong value after 232 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
    - failed on trial 1 of 2\
\
  * n = 50\
    - percolates() returns wrong value after 1494 sites opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
    - failed on trial 1 of 1\
\
==> FAILED\
\
\
Total: 4/15 tests passed!\
\
\
================================================================\
********************************************************************************\
*  TESTING CORRECTNESS (substituting reference Percolation)\
********************************************************************************\
\
Testing correctness of PercolationStats\
*-----------------------------------------------------------\
Running 15 total tests.\
\
Test 1: check that methods in PercolationStats do not print to standard output\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
  * n = 100, trials =  50\
  * n =  64, trials = 150\
==> passed\
\
Test 2: check that mean() returns value in expected range\
  * n =   2, trials = 10000\
  * n =   5, trials = 10000\
  * n =  10, trials = 10000\
  * n =  25, trials = 10000\
==> passed\
\
Test 3: check that stddev() returns value in expected range\
  * n =   2, trials = 10000\
  * n =   5, trials = 10000\
  * n =  10, trials = 10000\
  * n =  25, trials = 10000\
==> passed\
\
Test 4: check that PercolationStats creates trials Percolation objects, each of size n-by-n\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
  * n = 100, trials =  50\
  * n =  64, trials = 150\
==> passed\
\
Test 5: check that PercolationStats calls open() until system percolates\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
  * n = 100, trials =  50\
  * n =  64, trials = 150\
==> passed\
\
Test 6: check that PercolationStats does not call open() after system percolates\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
  * n = 100, trials =  50\
  * n =  64, trials = 150\
==> passed\
\
Test 7: check that mean() is consistent with the number of intercepted calls to open()\
        on blocked sites\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
  * n = 100, trials =  50\
  * n =  64, trials = 150\
==> passed\
\
Test 8: check that stddev() is consistent with the number of intercepted calls to open()\
        on blocked sites\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
  * n = 100, trials =  50\
  * n =  64, trials = 150\
==> passed\
\
Test 9: check that confidenceLo() and confidenceHigh() are consistent with mean() and stddev()\
  * n =  20, trials =  10\
    - PercolationStats confidence low  = 0.5536234716208799\
    - PercolationStats confidence high = 0.57237652837912\
    - PercolationStats mean            = 0.563\
    - PercolationStats stddev          = 0.04783943050571475\
    - T                                = 10\
    - student T                        = 10\
    - mean - 1.96 * stddev / sqrt(T)   = 0.5333488137767737\
    - mean + 1.96 * stddev / sqrt(T)   = 0.5926511862232262\
\
  * n =  50, trials =  20\
    - PercolationStats confidence low  = 0.5862742757242508\
    - PercolationStats confidence high = 0.5927257242757492\
    - PercolationStats mean            = 0.5895\
    - PercolationStats stddev          = 0.03291555383417582\
    - T                                = 20\
    - student T                        = 20\
    - mean - 1.96 * stddev / sqrt(T)   = 0.5750741224855069\
    - mean + 1.96 * stddev / sqrt(T)   = 0.6039258775144931\
\
  * n = 100, trials =  50\
    - PercolationStats confidence low  = 0.5907943634098854\
    - PercolationStats confidence high = 0.5922376365901144\
    - PercolationStats mean            = 0.5915159999999999\
    - PercolationStats stddev          = 0.018409096686592925\
    - T                                = 50\
    - student T                        = 50\
    - mean - 1.96 * stddev / sqrt(T)   = 0.5864132587357773\
    - mean + 1.96 * stddev / sqrt(T)   = 0.5966187412642225\
\
  * n =  64, trials = 150\
    - PercolationStats confidence low  = 0.5932011401307842\
    - PercolationStats confidence high = 0.5937877921608825\
    - PercolationStats mean            = 0.5934944661458333\
    - PercolationStats stddev          = 0.022448419519066516\
    - T                                = 150\
    - student T                        = 150\
    - mean - 1.96 * stddev / sqrt(T)   = 0.5899019708200617\
    - mean + 1.96 * stddev / sqrt(T)   = 0.597086961471605\
\
==> FAILED\
\
Test 10: check that exception is thrown if either n or trials is out of bounds\
  * n = -23, trials =  42\
    - throws wrong exception when calling constructor with invalid arguments\
    - throws a java.lang.IndexOutOfBoundsException\
    - should throw a java.lang.IllegalArgumentException\
\
  * n =  23, trials =   0\
    - throws wrong exception when calling constructor with invalid arguments\
    - throws a java.lang.IndexOutOfBoundsException\
    - should throw a java.lang.IllegalArgumentException\
\
  * n = -42, trials =   0\
    - throws wrong exception when calling constructor with invalid arguments\
    - throws a java.lang.IndexOutOfBoundsException\
    - should throw a java.lang.IllegalArgumentException\
\
  * n =  42, trials =  -1\
    - throws wrong exception when calling constructor with invalid arguments\
    - throws a java.lang.IndexOutOfBoundsException\
    - should throw a java.lang.IllegalArgumentException\
\
  * n = -2147483648, trials = -2147483648\
    - throws wrong exception when calling constructor with invalid arguments\
    - throws a java.lang.IndexOutOfBoundsException\
    - should throw a java.lang.IllegalArgumentException\
\
==> FAILED\
\
Test 11: create two PercolationStats objects at the same time and check mean()\
         (to make sure you didn't store data in static variables)\
  * n1 =  50, trials1 =  10, n2 =  50, trials2 =   5\
  * n1 =  50, trials1 =   5, n2 =  50, trials2 =  10\
  * n1 =  50, trials1 =  10, n2 =  25, trials2 =  10\
  * n1 =  25, trials1 =  10, n2 =  50, trials2 =  10\
  * n1 =  50, trials1 =  10, n2 =  15, trials2 = 100\
  * n1 =  15, trials1 = 100, n2 =  50, trials2 =  10\
==> passed\
\
Test 12: check that the methods return the same value, regardless of\
         the order in which they are called\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
  * n = 100, trials =  50\
  * n =  64, trials = 150\
==> passed\
\
Test 13: check that no calls to StdRandom.setSeed()\
  * n = 20, trials = 10\
  * n = 20, trials = 10\
  * n = 40, trials = 10\
  * n = 80, trials = 10\
==> passed\
\
Test 14: check distribution of number of sites opened until percolation\
  * n = 2, trials = 100000\
  * n = 3, trials = 100000\
  * n = 4, trials = 100000\
==> passed\
\
Test 15: check that each site is opened the expected number of times\
  * n = 2, trials = 100000\
  * n = 3, trials = 100000\
  * n = 4, trials = 100000\
==> passed\
\
\
Total: 13/15 tests passed!\
\
\
================================================================\
********************************************************************************\
*  MEMORY (substituting reference Percolation)\
********************************************************************************\
\
Analyzing memory of PercolationStats\
*-----------------------------------------------------------\
Running 4 total tests.\
\
Test 1a-1d: check memory usage as a function of T trials for n = 100\
            (max allowed: 8*T + 128 bytes)\
\
                 T        bytes\
--------------------------------------------\
=> FAILED       16          352   (1.4x)\
=> FAILED       32          608   (1.6x)\
=> FAILED       64         1120   (1.8x)\
=> FAILED      128         2144   (1.9x)\
==> 0/4 tests passed\
\
\
If you failed this test, it may be because you are holding an unnecessary\
reference to a (large) Percolation object in an instance variable. Would\
storing it in a local variable suffice?\
\
\
Estimated student memory = 16.00 T + 96.00   (R^2 = 1.000)\
\
Total: 0/4 tests passed!\
\
================================================================\
\
\
\
********************************************************************************\
*  TIMING (substituting reference Percolation)\
********************************************************************************\
\
Timing PercolationStats\
*-----------------------------------------------------------\
Running 4 total tests.\
\
Test 1: count calls to StdStats.mean() and StdStats.stddev()\
  * n =  20, trials =  10\
    - calls StdStats.mean() the wrong number of times\
    - number of student   calls to StdStats.mean() = 3\
    - number of reference calls to StdStats.mean() = 1\
\
    - calls StdStats.stddev() the wrong number of times\
    - number of student   calls to StdStats.stddev() = 3\
    - number of reference calls to StdStats.stddev() = 1\
\
  * n =  50, trials =  20\
    - calls StdStats.mean() the wrong number of times\
    - number of student   calls to StdStats.mean() = 3\
    - number of reference calls to StdStats.mean() = 1\
\
    - calls StdStats.stddev() the wrong number of times\
    - number of student   calls to StdStats.stddev() = 3\
    - number of reference calls to StdStats.stddev() = 1\
\
  * n = 100, trials =  50\
    - calls StdStats.mean() the wrong number of times\
    - number of student   calls to StdStats.mean() = 3\
    - number of reference calls to StdStats.mean() = 1\
\
    - calls StdStats.stddev() the wrong number of times\
    - number of student   calls to StdStats.stddev() = 3\
    - number of reference calls to StdStats.stddev() = 1\
\
  * n =  64, trials = 150\
    - calls StdStats.mean() the wrong number of times\
    - number of student   calls to StdStats.mean() = 3\
    - number of reference calls to StdStats.mean() = 1\
\
    - calls StdStats.stddev() the wrong number of times\
    - number of student   calls to StdStats.stddev() = 3\
    - number of reference calls to StdStats.stddev() = 1\
\
==> FAILED\
\
Test 2: count calls to methods in StdRandom\
  * n = 20, trials = 10\
  * n = 20, trials = 10\
  * n = 40, trials = 10\
  * n = 80, trials = 10\
==> passed\
\
Test 3: count calls to methods in Percolation\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
  * n = 100, trials =  50\
  * n =  64, trials = 150\
==> passed\
\
Test 4: Call PercolationStats methods with trials = 3 and values of n that go up\
        by a factor of sqrt(2). The test passes when n reaches 2,896.\
\
     The approximate order-of-growth is n ^ (log ratio)\
\
         n  seconds log ratio\
     ------------------------\
       512     0.11       2.2\
       724     0.25       2.5\
      1024     0.62       2.6\
      1448     1.63       2.8\
      2048     3.81       2.4\
      2896    10.26       2.9\
     [ exceeded the time limit of 10.0 seconds ]\
\
==> FAILED\
\
\
Total: 2/4 tests passed!\
\
\
================================================================\
\
\
\
********************************************************************************\
*  MEMORY\
********************************************************************************\
\
Analyzing memory of Percolation\
*-----------------------------------------------------------\
Running 4 total tests.\
\
Test 1a-1d: check that total memory <= 17 n^2 + 128 n + 1024 bytes\
\
                 n        bytes\
--------------------------------------------\
=> passed       64        59624         \
=> passed      256       925928         \
=> passed      512      3686632         \
=> passed     1024     14713064         \
==> 4/4 tests passed\
\
\
Estimated student memory = 14.00 n^2 + 32.00 n + 232.00   (R^2 = 1.000)\
\
\
Test 2 (bonus): check that total memory <= 11 n^2 + 128 n + 1024 bytes\
   -  bonus available only if solution passes backwash correctness test\
   -  failed memory test for n = 64\
==> FAILED\
\
\
Total: 4/4 tests passed!\
\
================================================================\
\
\
\
********************************************************************************\
*  TIMING\
********************************************************************************\
\
Timing Percolation\
*-----------------------------------------------------------\
Running 16 total tests.\
\
Test 1a-1e: Creates an n-by-n percolation system; open sites at random until\
            the system percolates, interleaving calls to percolates() and open().\
            Count calls to connected(), union() and find().\
\
                                       2 * connected()\
                 n       union()              + find()        constructor\
-----------------------------------------------------------------------------------\
=> passed       16          211                   645                   1         \
=> passed       32          839                  2541                   1         \
=> passed       64         3256                  9809                   1         \
=> passed      128        11236                 33801                   1         \
=> passed      256        47632                143067                   1         \
=> passed      512       183196                549877                   1         \
=> passed     1024       751571               2255316                   1         \
==> 7/7 tests passed\
\
\
If one of the values in the table violates the performance limits\
the factor by which you failed the test appears in parentheses.\
For example, (9.6x) in the union() column indicates that it uses\
9.6x too many calls.\
\
\
Tests 2a-2f: Check whether the number of calls to union(), connected(), and find()\
             is a constant per call to open(), isOpen(), isFull(), and percolates().\
             The table shows the maximum number of union(), connected(), and\
             find() calls made during a single call to open(), isOpen(), isFull(),\
             and percolates().\
\
                 n     per open()      per isOpen()    per isFull()    per percolates() \
---------------------------------------------------------------------------------------------\
=> passed       16       12               0               1               0         \
=> passed       32       12               0               1               0         \
=> passed       64       12               0               1               0         \
=> passed      128       12               0               1               0         \
=> passed      256       12               0               1               0         \
=> passed      512       12               0               1               0         \
=> passed     1024       12               0               1               0         \
==> 7/7 tests passed\
\
\
\
Running time (in seconds) depends on the machine on which the script runs.\
\
\
Test 3: Create an n-by-n percolation system; interleave calls to percolates()\
        and open() until the system percolates. The values of n go up by a\
        factor of sqrt(2). The test is passed if n >= 4096 in under 10 seconds.\
\
     The approximate order-of-growth is n ^ (log ratio)\
\
                        log   union-find     log\
         n  seconds   ratio   operations   ratio\
     -------------------------------------------\
       512     0.17     2.1       928316     2.0\
       724     0.16    -0.1      1845726     2.0\
      1024     0.40     2.6      3792113     2.1\
      1448     1.06     2.8      7504222     2.0\
      2048     2.47     2.4     14727486     1.9\
      2896     6.27     2.7     29760033     2.0\
      4096    12.91     2.1     58971307     2.0\
     [ exceeded the time limit of 10.0 seconds ]\
\
==> FAILED\
\
\
\
Test 4: Create an n-by-n percolation system; interleave calls to open(),\
        percolates(), isOpen(), isFull(), and numberOfOpenSites() until.\
        the system percolates. The values of n go up by a factor of sqrt(2).\
        The test is passed if n >= 4096 in under 10 seconds.\
\
                        log   union-find     log\
         n  seconds   ratio   operations   ratio\
     -------------------------------------------\
       724     0.19     2.1      1911078     2.0\
      1024     0.53     2.9      3750340     1.9\
      1448     1.09     2.1      7469952     2.0\
      2048     2.74     2.7     14790663     2.0\
      2896     5.72     2.1     29680531     2.0\
      4096    12.92     2.4     59480118     2.0\
     [ exceeded the time limit of 10.0 seconds ]\
\
==> FAILED\
\
\
Total: 14/16 tests passed!\
\
\
================================================================}