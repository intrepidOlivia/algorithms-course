{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red98\green98\blue98;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c45882\c45882\c45882;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww21900\viewh14560\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 See the Assessment Guide for information on how to interpret this report.\
\
ASSESSMENT SUMMARY\
\
Compilation:  PASSED\
API:          PASSED\
\
Spotbugs:     PASSED\
PMD:          FAILED (1 warning)\
Checkstyle:   FAILED (0 errors, 3 warnings)\
\
Correctness:  49/49 tests passed\
Memory:       19/22 tests passed\
Timing:       48/125 tests passed\
\
Aggregate score: 86.32%\
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]\
\
ASSESSMENT DETAILS\
\
The following files were submitted:\
----------------------------------\
9.3K Sep  1 19:52 Board.java\
5.0K Sep  1 19:52 Solver.java\
\
\
********************************************************************************\
*  COMPILING                                                                    \
********************************************************************************\
\
\
% javac Board.java\
*-----------------------------------------------------------\
\
% javac Solver.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
Checking the APIs of your programs.\
*-----------------------------------------------------------\
Board:\
\
Solver:\
\
================================================================\
\
\
********************************************************************************\
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       \
********************************************************************************\
\
\
% spotbugs *.class\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
% pmd .\
*-----------------------------------------------------------\
Solver.java:15: Can you replace the instance (or static) variable 'initialTwin' with a local variable? [SingularField]\
PMD ends with 1 warning.\
\
\
================================================================\
\
\
% checkstyle *.java\
*-----------------------------------------------------------\
\
% custom checkstyle checks for Board.java\
*-----------------------------------------------------------\
\
% custom checkstyle checks for Solver.java\
*-----------------------------------------------------------\
[WARN] Solver.java:138:38: You should not need to call 'hamming()' in this program. Instead, submit the version with 'manhattan()'. [Performance]\
[WARN] Solver.java:146:34: You should not need to call 'hamming()' in this program. Instead, submit the version with 'manhattan()'. [Performance]\
[WARN] Solver.java:146:49: You should not need to call 'hamming()' in this program. Instead, submit the version with 'manhattan()'. [Performance]\
Checkstyle ends with 0 errors and 3 warnings.\
\
\
================================================================\
\
\
********************************************************************************\
*  TESTING CORRECTNESS\
********************************************************************************\
\
Testing correctness of Board\
*-----------------------------------------------------------\
Running 24 total tests.\
\
Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.\
\
Test 1a: check hamming() with file inputs\
  * puzzle04.txt\
  * puzzle00.txt\
  * puzzle07.txt\
  * puzzle17.txt\
  * puzzle27.txt\
  * puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 1b: check hamming() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 9-by-9\
  * 10-by-10\
  * 127-by-127\
==> passed\
\
Test 2a: check manhattan() with file inputs\
  * puzzle04.txt\
  * puzzle00.txt\
  * puzzle07.txt\
  * puzzle17.txt\
  * puzzle27.txt\
  * puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 2b: check manhattan() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 9-by-9\
  * 10-by-10\
  * 127-by-127\
==> passed\
\
Test 3: check dimension() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 6-by-6\
==> passed\
\
Test 4a: check toString() with file inputs\
  * puzzle04.txt\
  * puzzle00.txt\
  * puzzle06.txt\
  * puzzle09.txt\
  * puzzle23.txt\
  * puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 4b: check toString() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 9-by-9\
  * 10-by-10\
  * 127-by-127\
==> passed\
\
Test 5a: check neighbors() with file inputs\
  * puzzle04.txt\
  * puzzle00.txt\
  * puzzle06.txt\
  * puzzle09.txt\
  * puzzle23.txt\
  * puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 5b: check neighbors() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 9-by-9\
  * 10-by-10\
  * 127-by-127\
==> passed\
\
Test 6a: check neighbors() of neigbors() with file inputs\
  * puzzle04.txt\
  * puzzle00.txt\
  * puzzle06.txt\
  * puzzle09.txt\
  * puzzle23.txt\
  * puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 6b: check neighbors() of neighbors() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 9-by-9\
  * 10-by-10\
==> passed\
\
Test 7a: check twin() with file inputs\
  * puzzle04.txt\
  * puzzle00.txt\
  * puzzle06.txt\
  * puzzle09.txt\
  * puzzle23.txt\
  * puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 7b: check twin() with random n-by-n boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 9-by-9\
  * 10-by-10\
==> passed\
\
Test 8a: check isGoal() with file inputs\
  * puzzle00.txt\
  * puzzle04.txt\
  * puzzle16.txt\
  * puzzle06.txt\
  * puzzle09.txt\
  * puzzle23.txt\
  * puzzle2x2-unsolvable1.txt\
  * puzzle3x3-unsolvable1.txt\
  * puzzle3x3-00.txt\
  * puzzle4x4-00.txt\
==> passed\
\
Test 8b: check isGoal() on n-by-n goal boards\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
  * 5-by-5\
  * 6-by-6\
  * 100-by-100\
==> passed\
\
Test 9: check that two Board objects can be created at the same time\
  * random 3-by-3 and 3-by-3 boards\
  * random 4-by-4 and 4-by-4 boards\
  * random 2-by-2 and 2-by-2 boards\
  * random 3-by-3 and 4-by-4 boards\
  * random 4-by-4 and 3-by-3 boards\
==> passed\
\
Test 10a: check equals()\
  * reflexive\
  * symmetric\
  * transitive\
  * argument is null\
  * argument is of type String\
  * Board object stored in a variable of type Object\
==> passed\
\
Test 10b: check correctness of equals() on random n-by-n boards\
  * n = 2\
  * n = 3\
  * n = 4\
  * 5 <= n < 10\
==> passed\
\
Test 10c: check equals() when board sizes m and n are different\
  * m = 4, n = 5\
  * m = 2, n = 5\
  * m = 5, n = 3\
  * m = 2, n = 3\
  * m = 3, n = 2\
==> passed\
\
Test 11: check that Board is immutable by changing argument array after\
         construction and making sure Board does not mutate\
==> passed\
\
Test 12: check that Board is immutable by testing whether methods\
         return the same value, regardless of order in which called\
  * puzzle10.txt\
  * puzzle20.txt\
  * puzzle30.txt\
  * 2-by-2\
  * 3-by-3\
  * 4-by-4\
==> passed\
\
Test 13: check dimension() on a board that is kth-neighbor of a board\
  * 0th neighbor of puzzle27.txt\
  * 1st neighbor of puzzle27.txt\
  * 2nd neighbor of puzzle27.txt\
  * 13th neighbor of puzzle27.txt\
  * 13th neighbor of puzzle00.txt\
  * 13th neighbor of puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 14: check hamming() on a board that is kth-neighbor of a board\
  * 0th neighbor of puzzle27.txt\
  * 1st neighbor of puzzle27.txt\
  * 2nd neighbor of puzzle27.txt\
  * 13th neighbor of puzzle27.txt\
  * 13th neighbor of puzzle00.txt\
  * 13th neighbor of puzzle2x2-unsolvable1.txt\
==> passed\
\
Test 15: check manhattan() on a board that is a kth-neighbor of a board\
  * 0th neighbor of puzzle27.txt\
  * 1st neighbor of puzzle27.txt\
  * 2nd neighbor of puzzle27.txt\
  * 13th neighbor of puzzle27.txt\
  * 13th neighbor of puzzle00.txt\
  * 13th neighbor of puzzle2x2-unsolvable1.txt\
==> passed\
\
\
Total: 24/24 tests passed!\
\
\
================================================================\
********************************************************************************\
*  MEMORY\
********************************************************************************\
\
Analyzing memory of Board\
*-----------------------------------------------------------\
Running 10 total tests.\
\
Memory usage of an n-by-n board\
[ must be at most 4n^2 + 32n + 64 bytes ]\
\
\
              n       student (bytes)    reference (bytes)\
----------------------------------------------------------\
=> passed     2           144                  128\
=> passed     3           208                  192\
=> passed     4           256                  240\
=> passed     8           576                  560\
=> passed    12          1024                 1008\
=> passed    16          1600                 1584\
=> passed    20          2304                 2288\
=> passed    37          6872                 6856\
=> passed    72         23104                23088\
=> passed   120         61504                61488\
==> 10/10 tests passed\
\
Total: 10/10 tests passed!\
\
Student   memory = 4.00 n^2 + 32.00 n + 64.00   (R^2 = 1.000)\
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)\
\
================================================================\
\
\
\
********************************************************************************\
*  TESTING CORRECTNESS (substituting reference Board)\
********************************************************************************\
\
Testing correctness of Solver\
*-----------------------------------------------------------\
Running 25 total tests.\
\
Test 1a: check moves() with file inputs\
  * puzzle00.txt\
  * puzzle01.txt\
  * puzzle02.txt\
  * puzzle03.txt\
  * puzzle04.txt\
  * puzzle05.txt\
  * puzzle06.txt\
  * puzzle07.txt\
  * puzzle08.txt\
  * puzzle09.txt\
  * puzzle10.txt\
  * puzzle11.txt\
  * puzzle12.txt\
  * puzzle13.txt\
==> passed\
\
Test 1b: check solution() with file inputs\
  * puzzle00.txt\
  * puzzle01.txt\
  * puzzle02.txt\
  * puzzle03.txt\
  * puzzle04.txt\
  * puzzle05.txt\
  * puzzle06.txt\
  * puzzle07.txt\
  * puzzle08.txt\
  * puzzle09.txt\
  * puzzle10.txt\
  * puzzle11.txt\
  * puzzle12.txt\
  * puzzle13.txt\
==> passed\
\
Test 2a: check moves() with more file inputs\
  * puzzle14.txt\
  * puzzle15.txt\
  * puzzle16.txt\
  * puzzle17.txt\
  * puzzle18.txt\
  * puzzle19.txt\
  * puzzle20.txt\
  * puzzle21.txt\
  * puzzle22.txt\
  * puzzle23.txt\
  * puzzle24.txt\
  * puzzle25.txt\
  * puzzle26.txt\
  * puzzle27.txt\
  * puzzle28.txt\
  * puzzle29.txt\
  * puzzle30.txt\
  * puzzle31.txt\
==> passed\
\
Test 2b: check solution() with more file inputs\
  * puzzle14.txt\
  * puzzle15.txt\
  * puzzle16.txt\
  * puzzle17.txt\
  * puzzle18.txt\
  * puzzle19.txt\
  * puzzle20.txt\
  * puzzle21.txt\
  * puzzle22.txt\
  * puzzle23.txt\
  * puzzle24.txt\
  * puzzle25.txt\
  * puzzle26.txt\
  * puzzle27.txt\
  * puzzle28.txt\
  * puzzle29.txt\
  * puzzle30.txt\
  * puzzle31.txt\
==> passed\
\
Test 3a: check moves() with random solvable n-by-n boards\
  * 1000 random 3-by-3 boards that are exactly 1 move from goal\
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal\
==> passed\
\
Test 3b: check solution() with random solvable n-by-n boards\
  * 1000 random 3-by-3 boards that are exactly 1 move from goal\
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal\
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal\
==> passed\
\
Test 4: create two Solver objects at the same time\
  * puzzle04.txt and puzzle04.txt\
  * puzzle00.txt and puzzle04.txt\
  * puzzle04.txt and puzzle00.txt\
==> passed\
\
Test 5a: call isSolvable() with file inputs\
  * puzzle01.txt\
  * puzzle03.txt\
  * puzzle04.txt\
  * puzzle17.txt\
  * puzzle3x3-unsolvable1.txt\
  * puzzle3x3-unsolvable2.txt\
  * puzzle4x4-unsolvable.txt\
==> passed\
\
Test 5b: call isSolvable() on random n-by-n boards\
  * 100 random 2-by-2 boards\
==> passed\
\
Test 6: check moves() on unsolvable puzzles\
  * puzzle2x2-unsolvable1.txt\
  * puzzle2x2-unsolvable2.txt\
  * puzzle3x3-unsolvable1.txt\
  * puzzle3x3-unsolvable2.txt\
  * puzzle4x4-unsolvable.txt\
==> passed\
\
Test 7: check solution() on unsolvable puzzles\
  * puzzle2x2-unsolvable1.txt\
  * puzzle2x2-unsolvable2.txt\
  * puzzle3x3-unsolvable1.txt\
  * puzzle3x3-unsolvable2.txt\
  * puzzle4x4-unsolvable.txt\
==> passed\
\
Test 8a: check that Solver is immutable by testing whether methods\
         return the same value, regardless of order in which called\
  * puzzle3x3-00.txt\
  * puzzle3x3-01.txt\
  * puzzle3x3-05.txt\
  * puzzle3x3-10.txt\
  * random 2-by-2 solvable boards\
==> passed\
\
Test 8b: check that Solver is immutable by testing whether methods\
         return the same value, regardless of order in which called\
  * puzzle3x3-unsolvable1.txt\
  * puzzle3x3-unsolvable2.txt\
  * puzzle4x4-unsolvable.txt\
  * random 2-by-2 unsolvable boards\
==> passed\
\
Test 9a: check that equals() method in Board is called\
  * puzzle00.txt\
  * puzzle04.txt\
  * puzzle05.txt\
  * puzzle10.txt\
==> passed\
\
Test 9b: check that equals() method in Board is called only\
         with an argument of type Board\
  * puzzle00.txt\
  * puzzle04.txt\
  * puzzle05.txt\
  * puzzle10.txt\
==> passed\
\
Test 9c: check that equals() method in Board is called only\
         with a neighbor of a neighbor as an argument\
  * puzzle00.txt\
  * puzzle04.txt\
  * puzzle05.txt\
  * puzzle10.txt\
  * puzzle27.txt\
==> passed\
\
Test 10: check that constructor throws exception if board is null\
==> passed\
\
Test 11a: check moves() with 2-by-2 file inputs\
  * puzzle2x2-00.txt\
  * puzzle2x2-01.txt\
  * puzzle2x2-02.txt\
  * puzzle2x2-03.txt\
  * puzzle2x2-04.txt\
  * puzzle2x2-05.txt\
  * puzzle2x2-06.txt\
==> passed\
\
Test 11b: check solution() with 2-by-2 file inputs\
  * puzzle2x2-00.txt\
  * puzzle2x2-01.txt\
  * puzzle2x2-02.txt\
  * puzzle2x2-03.txt\
  * puzzle2x2-04.txt\
  * puzzle2x2-05.txt\
  * puzzle2x2-06.txt\
==> passed\
\
Test 12a: check moves() with 3-by-3 file inputs\
  * puzzle3x3-00.txt\
  * puzzle3x3-01.txt\
  * puzzle3x3-02.txt\
  * puzzle3x3-03.txt\
  * puzzle3x3-04.txt\
  * puzzle3x3-05.txt\
  * puzzle3x3-06.txt\
  * puzzle3x3-07.txt\
  * puzzle3x3-08.txt\
  * puzzle3x3-09.txt\
  * puzzle3x3-10.txt\
  * puzzle3x3-11.txt\
  * puzzle3x3-12.txt\
  * puzzle3x3-13.txt\
  * puzzle3x3-14.txt\
  * puzzle3x3-15.txt\
  * puzzle3x3-16.txt\
  * puzzle3x3-17.txt\
  * puzzle3x3-18.txt\
  * puzzle3x3-19.txt\
  * puzzle3x3-20.txt\
  * puzzle3x3-21.txt\
  * puzzle3x3-22.txt\
  * puzzle3x3-23.txt\
  * puzzle3x3-24.txt\
  * puzzle3x3-25.txt\
  * puzzle3x3-26.txt\
  * puzzle3x3-27.txt\
  * puzzle3x3-28.txt\
  * puzzle3x3-29.txt\
  * puzzle3x3-30.txt\
==> passed\
\
Test 12b: check solution() with 3-by-3 file inputs\
  * puzzle3x3-00.txt\
  * puzzle3x3-01.txt\
  * puzzle3x3-02.txt\
  * puzzle3x3-03.txt\
  * puzzle3x3-04.txt\
  * puzzle3x3-05.txt\
  * puzzle3x3-06.txt\
  * puzzle3x3-07.txt\
  * puzzle3x3-08.txt\
  * puzzle3x3-09.txt\
  * puzzle3x3-10.txt\
  * puzzle3x3-11.txt\
  * puzzle3x3-12.txt\
  * puzzle3x3-13.txt\
  * puzzle3x3-14.txt\
  * puzzle3x3-15.txt\
  * puzzle3x3-16.txt\
  * puzzle3x3-17.txt\
  * puzzle3x3-18.txt\
  * puzzle3x3-19.txt\
  * puzzle3x3-20.txt\
  * puzzle3x3-21.txt\
  * puzzle3x3-22.txt\
  * puzzle3x3-23.txt\
  * puzzle3x3-24.txt\
  * puzzle3x3-25.txt\
  * puzzle3x3-26.txt\
  * puzzle3x3-27.txt\
  * puzzle3x3-28.txt\
  * puzzle3x3-29.txt\
  * puzzle3x3-30.txt\
==> passed\
\
Test 13a: check moves() with 4-by-4 file inputs\
  * puzzle4x4-00.txt\
  * puzzle4x4-01.txt\
  * puzzle4x4-02.txt\
  * puzzle4x4-03.txt\
  * puzzle4x4-04.txt\
  * puzzle4x4-05.txt\
  * puzzle4x4-06.txt\
  * puzzle4x4-07.txt\
  * puzzle4x4-08.txt\
  * puzzle4x4-09.txt\
  * puzzle4x4-10.txt\
  * puzzle4x4-11.txt\
  * puzzle4x4-12.txt\
  * puzzle4x4-13.txt\
  * puzzle4x4-14.txt\
  * puzzle4x4-15.txt\
  * puzzle4x4-16.txt\
  * puzzle4x4-17.txt\
  * puzzle4x4-18.txt\
  * puzzle4x4-19.txt\
  * puzzle4x4-20.txt\
  * puzzle4x4-21.txt\
  * puzzle4x4-22.txt\
  * puzzle4x4-23.txt\
  * puzzle4x4-24.txt\
  * puzzle4x4-25.txt\
  * puzzle4x4-26.txt\
  * puzzle4x4-27.txt\
  * puzzle4x4-28.txt\
  * puzzle4x4-29.txt\
  * puzzle4x4-30.txt\
==> passed\
\
Test 13b: check solution() with 4-by-4 file inputs\
  * puzzle4x4-00.txt\
  * puzzle4x4-01.txt\
  * puzzle4x4-02.txt\
  * puzzle4x4-03.txt\
  * puzzle4x4-04.txt\
  * puzzle4x4-05.txt\
  * puzzle4x4-06.txt\
  * puzzle4x4-07.txt\
  * puzzle4x4-08.txt\
  * puzzle4x4-09.txt\
  * puzzle4x4-10.txt\
  * puzzle4x4-11.txt\
  * puzzle4x4-12.txt\
  * puzzle4x4-13.txt\
  * puzzle4x4-14.txt\
  * puzzle4x4-15.txt\
  * puzzle4x4-16.txt\
  * puzzle4x4-17.txt\
  * puzzle4x4-18.txt\
  * puzzle4x4-19.txt\
  * puzzle4x4-20.txt\
  * puzzle4x4-21.txt\
  * puzzle4x4-22.txt\
  * puzzle4x4-23.txt\
  * puzzle4x4-24.txt\
  * puzzle4x4-25.txt\
  * puzzle4x4-26.txt\
  * puzzle4x4-27.txt\
  * puzzle4x4-28.txt\
  * puzzle4x4-29.txt\
  * puzzle4x4-30.txt\
==> passed\
\
Test 14a: check moves() with random solvable n-by-n boards\
  * 100 random 2-by-2 boards that are <= 6 moves from goal\
  * 200 random 3-by-3 boards that are <= 20 moves from goal\
  * 200 random 4-by-4 boards that are <= 20 moves from goal\
  * 200 random 5-by-5 boards that are <= 20 moves from goal\
==> passed\
\
Test 14b: check solution() with random solvable n-by-n boards\
  * 100 random 2-by-2 boards that are <= 6 moves from goal\
  * 200 random 3-by-3 boards that are <= 20 moves from goal\
  * 200 random 4-by-4 boards that are <= 20 moves from goal\
  * 200 random 5-by-5 boards that are <= 20 moves from goal\
==> passed\
\
\
Total: 25/25 tests passed!\
\
\
================================================================\
********************************************************************************\
*  MEMORY (substituting reference Board)\
********************************************************************************\
\
Analyzing memory of Solver\
*-----------------------------------------------------------\
Running 12 total tests.\
\
Maximum allowed time per puzzle is 5.0 seconds.\
Maximum allowed memory per puzzle = 200000000 bytes.\
\
Test 1: Measure memory of Solver.\
\
               filename   moves   memory\
---------------------------------------------\
=> passed  puzzle10.txt      10     5568         \
=> passed  puzzle15.txt      15     6664         \
=> passed  puzzle20.txt      20     3872         \
=> passed  puzzle25.txt      25     4752         \
=> passed  puzzle30.txt      30     5632         \
=> passed  puzzle35.txt      35     7400         \
==> 6/6 tests passed\
\
\
\
Test 2: Measure memory of MinPQ.\
\
                              deep              max           ending\
               filename     memory             size             size\
--------------------------------------------------------------------\
=> passed  puzzle10.txt      29584               34               32         \
=> passed  puzzle15.txt      37104               52               50         \
=> passed  puzzle20.txt     297392              794              792         \
=> FAILED  puzzle25.txt    2872752   (1.1x)    7861   (1.1x)    7859   (1.1x)\
=> FAILED  puzzle30.txt   19156496   (1.8x)   50969   (1.7x)   50967   (1.7x)\
=> FAILED  puzzle35.txt  188306168   (1.2x)  540435   (1.1x)  540433   (1.1x)\
==> 3/6 tests passed\
\
\
Total: 9/12 tests passed!\
\
================================================================\
\
\
\
********************************************************************************\
*  TIMING (substituting reference Board)\
********************************************************************************\
\
Timing Solver\
*-----------------------------------------------------------\
Running 125 total tests.\
\
Maximum allowed time per puzzle is 5.0 seconds.\
\
Test 1: Measure CPU time and check correctness\
\
               filename   moves    n  seconds\
---------------------------------------------\
=> passed  puzzle20.txt      20    3     0.02 \
=> passed  puzzle22.txt      22    3     0.01 \
=> passed  puzzle21.txt      21    3     0.01 \
=> passed  puzzle23.txt      23    3     0.02 \
=> passed  puzzle24.txt      24    3     0.02 \
=> passed  puzzle25.txt      25    3     0.05 \
=> passed  puzzle27.txt      27    3     0.04 \
=> passed  puzzle29.txt      29    3     0.10 \
=> passed  puzzle26.txt      26    3     0.03 \
=> passed  puzzle28.txt      28    3     0.11 \
=> passed  puzzle30.txt      30    3     0.29 \
=> passed  puzzle31.txt      31    3     0.32 \
=> passed  puzzle39.txt      39    4     0.57 \
=> passed  puzzle41.txt      41    5     0.36 \
=> passed  puzzle34.txt      34    4     0.94 \
=> passed  puzzle37.txt      37    4     0.67 \
=> passed  puzzle44.txt      44    5     1.74 \
=> passed  puzzle32.txt      32    4     4.06 \
=> passed  puzzle35.txt      35    4     2.51 \
=> passed  puzzle33.txt      33    4     3.53 \
=> FAILED  puzzle43.txt      43    4     8.78 (>= 5.0 seconds)\
\
Exceeded CPU limit of 5.0 seconds per puzzle. Aborting tests.\
\
==> 20/25 tests passed\
\
\
\
Test 2: Count MinPQ operations\
\
               filename   insert()         delMin()\
---------------------------------------------------\
=> passed  puzzle20.txt       1976             1184         \
=> passed  puzzle22.txt       4632             2762         \
=> passed  puzzle21.txt       5526             3286         \
=> FAILED  puzzle23.txt      10585   (1.1x)    6296   (1.1x)\
=> passed  puzzle24.txt       6988             4240         \
=> FAILED  puzzle25.txt      19455   (1.1x)   11596   (1.1x)\
=> FAILED  puzzle27.txt      23254   (1.2x)   14106   (1.2x)\
=> FAILED  puzzle29.txt      47899   (2.4x)   29166   (2.4x)\
=> passed  puzzle26.txt      16549             9988         \
=> FAILED  puzzle28.txt      60005   (1.3x)   36260   (1.3x)\
=> FAILED  puzzle30.txt     129361   (1.7x)   78394   (1.7x)\
=> FAILED  puzzle31.txt     165484   (2.1x)  100736   (2.1x)\
=> FAILED  puzzle39.txt     243869   (2.0x)  118852   (1.9x)\
=> passed  puzzle41.txt     157996            68084         \
=> FAILED  puzzle34.txt     450827   (1.7x)  216714   (1.7x)\
=> FAILED  puzzle37.txt     339883   (1.2x)  163602   (1.2x)\
=> FAILED  puzzle44.txt     646572   (1.3x)  290684   (1.3x)\
=> FAILED  puzzle32.txt    1514313   (1.7x)  722658   (1.7x)\
=> FAILED  puzzle35.txt    1071839   (1.2x)  531406   (1.2x)\
=> FAILED  puzzle33.txt    1472140   (1.4x)  708226   (1.4x)\
=> FAILED  puzzle43.txt    3648033   (2.0x) 1789558   (2.0x)\
==> 6/25 tests passed\
\
\
\
Test 3: Count Board operations (that should not get called)\
\
               filename    hamming()   toString()\
-------------------------------------------------\
=> passed  puzzle20.txt          22262            0         \
=> passed  puzzle22.txt          59992            0         \
=> passed  puzzle21.txt          73308            0         \
=> passed  puzzle23.txt          155300            0         \
=> passed  puzzle24.txt          97180            0         \
=> passed  puzzle25.txt          303898            0         \
=> FAILED  puzzle27.txt          383812   (1.1x)   0         \
=> FAILED  puzzle29.txt          889380   (2.2x)   0         \
=> passed  puzzle26.txt          257036            0         \
=> FAILED  puzzle28.txt          1110024   (1.1x)   0         \
=> FAILED  puzzle30.txt          2591142   (1.5x)   0         \
=> FAILED  puzzle31.txt          3508552   (2.0x)   0         \
=> FAILED  puzzle39.txt          4341580   (1.8x)   0         \
=> passed  puzzle41.txt          2511242            0         \
=> FAILED  puzzle34.txt          8391238   (1.4x)   0         \
=> passed  puzzle37.txt          6369266            0         \
=> FAILED  puzzle44.txt          12240910   (1.2x)   0         \
=> FAILED  puzzle32.txt          31350096   (1.4x)   0         \
=> passed  puzzle35.txt          22414794            0         \
=> FAILED  puzzle33.txt          30238640   (1.1x)   0         \
=> FAILED  puzzle43.txt          81272316   (1.7x)   0         \
==> 10/25 tests passed\
\
\
\
Test 4a: Count Board operations (that should get called)\
\
               filename    Board()            equals()         manhattan()\
--------------------------------------------------------------------------\
=> passed  puzzle20.txt       3156                3146                3160         \
=> passed  puzzle22.txt       7390                7384                7394         \
=> passed  puzzle21.txt       8808                8800                8812         \
=> FAILED  puzzle23.txt      16877   (1.1x)      16869   (1.1x)      16881         \
=> passed  puzzle24.txt      11224               11214               11228         \
=> FAILED  puzzle25.txt      31047   (1.1x)      31039   (1.1x)      31051         \
=> FAILED  puzzle27.txt      37356   (1.2x)      37348   (1.2x)      37360         \
=> FAILED  puzzle29.txt      77061   (2.4x)      77053   (2.4x)      77065         \
=> passed  puzzle26.txt      26533               26527               26537         \
=> FAILED  puzzle28.txt      96261   (1.3x)      96251   (1.3x)      96265         \
=> FAILED  puzzle30.txt     207751   (1.7x)     207745   (1.7x)     207755         \
=> FAILED  puzzle31.txt     266216   (2.1x)     266208   (2.1x)     266220         \
=> FAILED  puzzle39.txt     362717   (1.9x)     362709   (1.9x)     362721         \
=> passed  puzzle41.txt     226076              226066              226080         \
=> FAILED  puzzle34.txt     667537   (1.7x)     667531   (1.7x)     667541         \
=> FAILED  puzzle37.txt     503481   (1.2x)     503473   (1.2x)     503485         \
=> FAILED  puzzle44.txt     937252   (1.3x)     937242   (1.3x)     937256         \
=> FAILED  puzzle32.txt    2236967   (1.7x)    2236957   (1.7x)    2236971         \
=> FAILED  puzzle35.txt    1603241   (1.2x)    1603231   (1.2x)    1603245         \
=> FAILED  puzzle33.txt    2180362   (1.4x)    2180354   (1.4x)    2180366         \
=> FAILED  puzzle43.txt    5437587   (2.0x)    5437579   (2.0x)    5437591         \
==> 6/25 tests passed\
\
\
\
Test 4b: count Board operations (that should get called),\
         rejecting if doesn't adhere to stricter caching limits\
\
               filename    Board()            equals()         manhattan()\
--------------------------------------------------------------------------\
=> passed  puzzle20.txt       3156                3146                3160         \
=> passed  puzzle22.txt       7390                7384                7394         \
=> passed  puzzle21.txt       8808                8800                8812         \
=> FAILED  puzzle23.txt      16877   (1.1x)      16869   (1.1x)      16881   (1.1x)\
=> passed  puzzle24.txt      11224               11214               11228         \
=> FAILED  puzzle25.txt      31047   (1.1x)      31039   (1.1x)      31051   (1.1x)\
=> FAILED  puzzle27.txt      37356   (1.2x)      37348   (1.2x)      37360   (1.2x)\
=> FAILED  puzzle29.txt      77061   (2.4x)      77053   (2.4x)      77065   (2.4x)\
=> passed  puzzle26.txt      26533               26527               26537         \
=> FAILED  puzzle28.txt      96261   (1.3x)      96251   (1.3x)      96265   (1.3x)\
=> FAILED  puzzle30.txt     207751   (1.7x)     207745   (1.7x)     207755   (1.7x)\
=> FAILED  puzzle31.txt     266216   (2.1x)     266208   (2.1x)     266220   (2.1x)\
=> FAILED  puzzle39.txt     362717   (1.9x)     362709   (1.9x)     362721   (1.9x)\
=> passed  puzzle41.txt     226076              226066              226080         \
=> FAILED  puzzle34.txt     667537   (1.7x)     667531   (1.7x)     667541   (1.7x)\
=> FAILED  puzzle37.txt     503481   (1.2x)     503473   (1.2x)     503485   (1.2x)\
=> FAILED  puzzle44.txt     937252   (1.3x)     937242   (1.3x)     937256   (1.3x)\
=> FAILED  puzzle32.txt    2236967   (1.7x)    2236957   (1.7x)    2236971   (1.7x)\
=> FAILED  puzzle35.txt    1603241   (1.2x)    1603231   (1.2x)    1603245   (1.2x)\
=> FAILED  puzzle33.txt    2180362   (1.4x)    2180354   (1.4x)    2180366   (1.4x)\
=> FAILED  puzzle43.txt    5437587   (2.0x)    5437579   (2.0x)    5437591   (2.0x)\
==> 6/25 tests passed\
\
\
Total: 48/125 tests passed!\
\
\
================================================================\
}