{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red98\green98\blue98;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c45882\c45882\c45882;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww19840\viewh11200\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 See the Assessment Guide for information on how to interpret this report.\
\
ASSESSMENT SUMMARY\
\
Compilation:  PASSED\
API:          PASSED\
\
Findbugs:     FAILED (1 warning)\
PMD:          PASSED\
Checkstyle:   FAILED (0 errors, 11 warnings)\
\
Correctness:  27/30 tests passed\
Memory:       8/8 tests passed\
Timing:       18/20 tests passed\
\
Aggregate score: 92.00%\
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]\
\
ASSESSMENT DETAILS\
\
The following files were submitted:\
----------------------------------\
7.2K Aug  8 16:06 Percolation.java\
2.9K Aug  8 16:06 PercolationStats.java\
\
\
********************************************************************************\
*  COMPILING                                                                    \
********************************************************************************\
\
\
% javac Percolation.java\
*-----------------------------------------------------------\
\
% javac PercolationStats.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
Checking the APIs of your programs.\
*-----------------------------------------------------------\
Percolation:\
\
PercolationStats:\
\
================================================================\
\
\
********************************************************************************\
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       \
********************************************************************************\
\
\
% findbugs *.class\
*-----------------------------------------------------------\
M P SS_SHOULD_BE_STATIC SS: The instance variable 'CONF_95' is final and initialized to a compile-time constant. Should it also be static?  At PercolationStats.java:[line 14]\
Warnings generated: 1\
\
\
================================================================\
\
\
% pmd .\
*-----------------------------------------------------------\
PercolationStats.java:14: This instance variable should be turned into a class constant by adding the 'static' modifier. [FinalFieldCouldBeStatic]\
PMD ends with 1 warning.\
\
\
================================================================\
\
\
% checkstyle *.java\
*-----------------------------------------------------------\
[WARN] Percolation.java:9:11: The modifier 'private' is out of order. The preferred order is ['public', 'protected', 'private', 'abstract', 'static', 'final', 'transient', 'volatile', 'synchronized', 'native', and 'strictfp']. [ModifierOrder]\
[WARN] Percolation.java:10:11: The modifier 'private' is out of order. The preferred order is ['public', 'protected', 'private', 'abstract', 'static', 'final', 'transient', 'volatile', 'synchronized', 'native', and 'strictfp']. [ModifierOrder]\
[WARN] PercolationStats.java:11:11: The modifier 'private' is out of order. The preferred order is ['public', 'protected', 'private', 'abstract', 'static', 'final', 'transient', 'volatile', 'synchronized', 'native', and 'strictfp']. [ModifierOrder]\
[WARN] PercolationStats.java:12:11: The modifier 'private' is out of order. The preferred order is ['public', 'protected', 'private', 'abstract', 'static', 'final', 'transient', 'volatile', 'synchronized', 'native', and 'strictfp']. [ModifierOrder]\
[WARN] PercolationStats.java:13:11: The modifier 'private' is out of order. The preferred order is ['public', 'protected', 'private', 'abstract', 'static', 'final', 'transient', 'volatile', 'synchronized', 'native', and 'strictfp']. [ModifierOrder]\
[WARN] PercolationStats.java:14:11: The modifier 'private' is out of order. The preferred order is ['public', 'protected', 'private', 'abstract', 'static', 'final', 'transient', 'volatile', 'synchronized', 'native', and 'strictfp']. [ModifierOrder]\
[WARN] PercolationStats.java:14:26: The instance variable 'CONF_95' must start with a lowercase letter and use camelCase. [MemberName]\
[WARN] PercolationStats.java:85:13: The local variable 'T' must start with a lowercase letter and use camelCase. [LocalVariableName]\
Checkstyle ends with 0 errors and 8 warnings.\
\
% custom checkstyle checks for Percolation.java\
*-----------------------------------------------------------\
[INFO] Percolation.java:71: Using a loop in this method might be a performance bug. [Performance]\
[WARN] Percolation.java:9:19: Can you use the type 'boolean[][]' instead of 'int[][]'? [Design]\
[WARN] Percolation.java:102:25: The numeric literal '4' appears to be unnecessary. [NumericLiteral]\
[WARN] Percolation.java:104:45: The numeric literal '4' appears to be unnecessary. [NumericLiteral]\
Checkstyle ends with 0 errors and 3 warnings.\
\
% custom checkstyle checks for PercolationStats.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
********************************************************************************\
*  TESTING CORRECTNESS\
********************************************************************************\
\
Testing correctness of Percolation\
*-----------------------------------------------------------\
Running 15 total tests.\
\
Tests 1 through 8 create a Percolation object using your code, then repeatedly\
open sites by calling open(). After each call to open(), it checks the return\
values of isOpen(), percolates(), numberOfOpenSites(), and isFull() in that order.\
Except as noted, a site is opened at most once.\
\
Tests 13 through 15 test backwash.\
\
Test 1: open predetermined list of sites using file inputs\
  * filename = input6.txt\
  * filename = input8.txt\
  * filename = input8-no.txt\
  * filename = input10-no.txt\
  * filename = greeting57.txt\
  * filename = heart25.txt\
==> passed\
\
Test 2: open random sites until just before system percolates\
  * n = 3\
  * n = 5\
  * n = 10\
  * n = 10\
  * n = 20\
  * n = 20\
  * n = 50\
  * n = 50\
==> passed\
\
Test 3: open predetermined sites for n = 1 and n = 2 (corner case test)\
  * filename = input1.txt\
    - percolates() returns wrong value after 1 site opened\
    - student   percolates() = false\
    - reference percolates() = true\
\
  * filename = input1-no.txt\
  * filename = input2.txt\
  * filename = input2-no.txt\
==> FAILED\
\
Test 4: check predetermined sites with long percolating path\
  * filename = snake13.txt\
  * filename = snake101.txt\
==> passed\
\
Test 5: open every site\
  * filename = input5.txt\
==> passed\
\
Test 6: open random sites until just before system percolates,\
        allowing open() to be called on a site more than once\
  * n = 3\
  * n = 5\
  * n = 10\
  * n = 10\
  * n = 20\
  * n = 20\
  * n = 50\
  * n = 50\
==> passed\
\
Test 7: call methods with invalid arguments\
  * n = 10, (row, col) = (-1, 5)\
  * n = 10, (row, col) = (11, 5)\
  * n = 10, (row, col) = (0, 5)\
  * n = 10, (row, col) = (5, -1)\
  * n = 10, (row, col) = (5, 11)\
  * n = 10, (row, col) = (5, 0)\
  * n = 10, (row, col) = (-2147483648, -2147483648)\
  * n = 10, (row, col) = (2147483647, 2147483647)\
==> passed\
\
Test 8: call constructor with invalid argument\
  * n = -10\
  * n = -1\
  * n = 0\
==> passed\
\
Test 9: create multiple Percolation objects at the same time\
        (to make sure you didn't store data in static variables)\
==> passed\
\
Test 10: open predetermined list of sites using file inputs,\
         but permute the order in which methods are called\
  * filename = input8.txt;  order =     isFull(),     isOpen(), percolates()\
  * filename = input8.txt;  order =     isFull(), percolates(),     isOpen()\
  * filename = input8.txt;  order =     isOpen(),     isFull(), percolates()\
  * filename = input8.txt;  order =     isOpen(), percolates(),     isFull()\
  * filename = input8.txt;  order = percolates(),     isOpen(),     isFull()\
  * filename = input8.txt;  order = percolates(),     isFull(),     isOpen()\
==> passed\
\
Test 11: call all methods in random order until just before system percolates\
  * n = 3\
  * n = 5\
  * n = 7\
  * n = 10\
  * n = 20\
  * n = 50\
==> passed\
\
Test 12: call all methods in random order until almost all sites are open,\
         but with inputs not prone to backwash\
  * n = 3\
  * n = 5\
  * n = 7\
  * n = 10\
  * n = 20\
  * n = 50\
==> passed\
\
Test 13: check for backwash with predetermined sites\
  * filename = input20.txt\
  * filename = input10.txt\
  * filename = input50.txt\
  * filename = jerry47.txt\
  * filename = sedgewick60.txt\
  * filename = wayne98.txt\
==> passed\
\
Test 14: check for backwash with predetermined sites that have\
         multiple percolating paths\
  * filename = input3.txt\
  * filename = input4.txt\
  * filename = input7.txt\
==> passed\
\
Test 15: call all methods in random order until all sites are open,\
         allowing isOpen() to be called on a site more than once\
         (these inputs are prone to backwash)\
  * n = 3\
  * n = 5\
  * n = 7\
  * n = 10\
  * n = 20\
  * n = 50\
==> passed\
\
\
Total: 14/15 tests passed!\
\
\
================================================================\
********************************************************************************\
*  TESTING CORRECTNESS (substituting reference Percolation)\
********************************************************************************\
\
Testing correctness of PercolationStats\
*-----------------------------------------------------------\
Running 15 total tests.\
\
Test 1: check that methods in PercolationStats do not print to standard output\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
  * n = 100, trials =  50\
  * n =  64, trials = 150\
==> passed\
\
Test 2: check that mean() returns value in expected range\
  * n =   2, trials = 10000\
  * n =   5, trials = 10000\
  * n =  10, trials = 10000\
  * n =  25, trials = 10000\
==> passed\
\
Test 3: check that stddev() returns value in expected range\
  * n =   2, trials = 10000\
  * n =   5, trials = 10000\
  * n =  10, trials = 10000\
  * n =  25, trials = 10000\
==> passed\
\
Test 4: check that PercolationStats creates trials Percolation objects, each of size n-by-n\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
  * n = 100, trials =  50\
  * n =  64, trials = 150\
==> passed\
\
Test 5: check that PercolationStats calls open() until system percolates\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
  * n = 100, trials =  50\
  * n =  64, trials = 150\
==> passed\
\
Test 6: check that PercolationStats does not call open() after system percolates\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
  * n = 100, trials =  50\
  * n =  64, trials = 150\
==> passed\
\
Test 7: check that mean() is consistent with the number of intercepted calls to open()\
        on blocked sites\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
  * n = 100, trials =  50\
  * n =  64, trials = 150\
==> passed\
\
Test 8: check that stddev() is consistent with the number of intercepted calls to open()\
        on blocked sites\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
  * n = 100, trials =  50\
  * n =  64, trials = 150\
==> passed\
\
Test 9: check that confidenceLo() and confidenceHigh() are consistent with mean() and stddev()\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
  * n = 100, trials =  50\
  * n =  64, trials = 150\
==> passed\
\
Test 10: check that exception is thrown if either n or trials is out of bounds\
  * n = -23, trials =  42\
    - throws wrong exception when calling constructor with invalid arguments\
    - throws a java.lang.IndexOutOfBoundsException\
    - should throw a java.lang.IllegalArgumentException\
\
  * n =  23, trials =   0\
    - throws wrong exception when calling constructor with invalid arguments\
    - throws a java.lang.IndexOutOfBoundsException\
    - should throw a java.lang.IllegalArgumentException\
\
  * n = -42, trials =   0\
    - throws wrong exception when calling constructor with invalid arguments\
    - throws a java.lang.IndexOutOfBoundsException\
    - should throw a java.lang.IllegalArgumentException\
\
  * n =  42, trials =  -1\
    - throws wrong exception when calling constructor with invalid arguments\
    - throws a java.lang.IndexOutOfBoundsException\
    - should throw a java.lang.IllegalArgumentException\
\
  * n = -2147483648, trials = -2147483648\
    - throws wrong exception when calling constructor with invalid arguments\
    - throws a java.lang.IndexOutOfBoundsException\
    - should throw a java.lang.IllegalArgumentException\
\
==> FAILED\
\
Test 11: create two PercolationStats objects at the same time and check mean()\
         (to make sure you didn't store data in static variables)\
  * n1 =  50, trials1 =  10, n2 =  50, trials2 =   5\
  * n1 =  50, trials1 =   5, n2 =  50, trials2 =  10\
  * n1 =  50, trials1 =  10, n2 =  25, trials2 =  10\
  * n1 =  25, trials1 =  10, n2 =  50, trials2 =  10\
  * n1 =  50, trials1 =  10, n2 =  15, trials2 = 100\
  * n1 =  15, trials1 = 100, n2 =  50, trials2 =  10\
==> passed\
\
Test 12: check that the methods return the same value, regardless of\
         the order in which they are called\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
    - total number of method calls = 2\
    - current value of confidenceLo()  = 0.59296\
    - previous value of confidenceLo()  = 0.0\
    - sequence of calls = confidenceLo() mean() confidenceLo() \
\
  * n = 100, trials =  50\
    - total number of method calls = 7\
    - current value of confidenceLo()  = 0.587243787063454\
    - previous value of confidenceLo()  = 0.0\
    - sequence of calls = confidenceLo() mean() mean() stddev() confidenceHi() stddev() stddev() confidenceLo() \
\
  * n =  64, trials = 150\
    - total number of method calls = 6\
    - current value of confidenceHi()  = 0.003872937595841242\
    - previous value of confidenceHi()  = 0.0\
    - sequence of calls = confidenceHi() stddev() stddev() stddev() confidenceLo() stddev() confidenceHi() \
\
==> FAILED\
\
Test 13: check that no calls to StdRandom.setSeed()\
  * n = 20, trials = 10\
  * n = 20, trials = 10\
  * n = 40, trials = 10\
  * n = 80, trials = 10\
==> passed\
\
Test 14: check distribution of number of sites opened until percolation\
  * n = 2, trials = 100000\
  * n = 3, trials = 100000\
  * n = 4, trials = 100000\
==> passed\
\
Test 15: check that each site is opened the expected number of times\
  * n = 2, trials = 100000\
  * n = 3, trials = 100000\
  * n = 4, trials = 100000\
==> passed\
\
\
Total: 13/15 tests passed!\
\
\
================================================================\
********************************************************************************\
*  MEMORY (substituting reference Percolation)\
********************************************************************************\
\
Analyzing memory of PercolationStats\
*-----------------------------------------------------------\
Running 4 total tests.\
\
Test 1a-1d: check memory usage as a function of T trials for n = 100\
            (max allowed: 8*T + 128 bytes)\
\
                 T        bytes\
--------------------------------------------\
=> passed       16          216         \
=> passed       32          344         \
=> passed       64          600         \
=> passed      128         1112         \
==> 4/4 tests passed\
\
\
Estimated student memory = 8.00 T + 88.00   (R^2 = 1.000)\
\
Total: 4/4 tests passed!\
\
================================================================\
\
\
\
********************************************************************************\
*  TIMING (substituting reference Percolation)\
********************************************************************************\
\
Timing PercolationStats\
*-----------------------------------------------------------\
Running 4 total tests.\
\
Test 1: count calls to StdStats.mean() and StdStats.stddev()\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
  * n = 100, trials =  50\
  * n =  64, trials = 150\
==> passed\
\
Test 2: count calls to methods in StdRandom\
  * n = 20, trials = 10\
  * n = 20, trials = 10\
  * n = 40, trials = 10\
  * n = 80, trials = 10\
==> passed\
\
Test 3: count calls to methods in Percolation\
  * n =  20, trials =  10\
  * n =  50, trials =  20\
  * n = 100, trials =  50\
  * n =  64, trials = 150\
==> passed\
\
Test 4: Call PercolationStats methods with trials = 3 and values of n that go up\
        by a factor of sqrt(2). The test passes when n reaches 2,896.\
\
     The approximate order-of-growth is n ^ (log ratio)\
\
         n  seconds log ratio\
     ------------------------\
       724     0.23       2.5\
      1024     0.55       2.5\
      1448     1.49       2.8\
      2048     3.56       2.5\
      2896     8.93       2.7\
==> passed\
\
\
Total: 4/4 tests passed!\
\
\
================================================================\
\
\
\
********************************************************************************\
*  MEMORY\
********************************************************************************\
\
Analyzing memory of Percolation\
*-----------------------------------------------------------\
Running 4 total tests.\
\
Test 1a-1d: check that total memory <= 17 n^2 + 128 n + 1024 bytes\
\
                 n        bytes\
--------------------------------------------\
=> passed       64        63752         \
=> passed      256       991496         \
=> passed      512      3948808         \
=> passed     1024     15761672         \
==> 4/4 tests passed\
\
\
Estimated student memory = 15.00 n^2 + 32.00 n + 264.00   (R^2 = 1.000)\
\
\
Test 2 (bonus): check that total memory <= 11 n^2 + 128 n + 1024 bytes\
   -  failed memory test for n = 64\
==> FAILED\
\
\
Total: 4/4 tests passed!\
\
================================================================\
\
\
\
********************************************************************************\
*  TIMING\
********************************************************************************\
\
Timing Percolation\
*-----------------------------------------------------------\
Running 16 total tests.\
\
Test 1a-1e: Creates an n-by-n percolation system; open sites at random until\
            the system percolates, interleaving calls to percolates() and open().\
            Count calls to connected(), union() and find().\
\
                                       2 * connected()\
                 n       union()              + find()        constructor\
-----------------------------------------------------------------------------------\
=> passed       16          160                   813                   1         \
=> passed       32          683                  3441                   1         \
=> passed       64         2602                 13086                   1         \
=> passed      128        10742                 53870                   1         \
=> passed      256        46335                231980                   1         \
=> passed      512       183291                917085                   1         \
=> passed     1024       738593               3694161                   1         \
==> 7/7 tests passed\
\
\
If one of the values in the table violates the performance limits\
the factor by which you failed the test appears in parentheses.\
For example, (9.6x) in the union() column indicates that it uses\
9.6x too many calls.\
\
\
Tests 2a-2f: Check whether the number of calls to union(), connected(), and find()\
             is a constant per call to open(), isOpen(), isFull(), and percolates().\
             The table shows the maximum number of union(), connected(), and\
             find() calls made during a single call to open(), isOpen(), isFull(),\
             and percolates().\
\
                 n     per open()      per isOpen()    per isFull()    per percolates() \
---------------------------------------------------------------------------------------------\
=> passed       16       20               0               1               0         \
=> passed       32       20               0               1               0         \
=> passed       64       20               0               1               0         \
=> passed      128       20               0               1               0         \
=> passed      256       20               0               1               0         \
=> passed      512       20               0               1               0         \
=> passed     1024       20               0               1               0         \
==> 7/7 tests passed\
\
\
\
Running time (in seconds) depends on the machine on which the script runs.\
\
\
Test 3: Create an n-by-n percolation system; interleave calls to percolates()\
        and open() until the system percolates. The values of n go up by a\
        factor of sqrt(2). The test is passed if n >= 4096 in under 10 seconds.\
\
     The approximate order-of-growth is n ^ (log ratio)\
\
                        log   union-find     log\
         n  seconds   ratio   operations   ratio\
     -------------------------------------------\
       512     0.19     2.1      1302994     2.0\
       724     0.18    -0.1      2605978     2.0\
      1024     0.45     2.6      5173930     2.0\
      1448     1.12     2.7     10267483     2.0\
      2048     2.69     2.5     20685711     2.0\
      2896     5.83     2.2     40770867     2.0\
      4096    12.81     2.3     82663708     2.0\
     [ exceeded the time limit of 10.0 seconds ]\
\
==> FAILED\
\
\
\
Test 4: Create an n-by-n percolation system; interleave calls to open(),\
        percolates(), isOpen(), isFull(), and numberOfOpenSites() until.\
        the system percolates. The values of n go up by a factor of sqrt(2).\
        The test is passed if n >= 4096 in under 10 seconds.\
\
                        log   union-find     log\
         n  seconds   ratio   operations   ratio\
     -------------------------------------------\
       724     0.18     2.4      2562896     2.1\
      1024     0.42     2.5      5158090     2.0\
      1448     1.04     2.6     10249596     2.0\
      2048     2.56     2.6     20696021     2.0\
      2896     6.05     2.5     41026997     2.0\
      4096    13.42     2.3     83110537     2.0\
     [ exceeded the time limit of 10.0 seconds ]\
\
==> FAILED\
\
\
Total: 14/16 tests passed!\
\
\
================================================================\
\
\
\
}